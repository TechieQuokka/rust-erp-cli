name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## Changes

          See the [CHANGELOG](CHANGELOG.md) for details.

          ## Installation

          Download the appropriate binary for your platform and add it to your PATH.

          ### Linux/macOS
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/erp-linux-amd64 -o erp
          chmod +x erp
          sudo mv erp /usr/local/bin/
          ```

          ### Windows
          Download `erp-windows-amd64.exe` and add it to your PATH.

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: erp
            asset_name: erp-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: erp
            asset_name: erp-linux-musl-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: erp.exe
            asset_name: erp-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: erp
            asset_name: erp-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: erp
            asset_name: erp-macos-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools libpq-dev musl-dev
        else
          sudo apt-get install -y libpq-dev
        fi

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install postgresql

    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  docker-release:
    name: Build and Push Docker Image
    needs: create-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/erp:latest
          ${{ secrets.DOCKER_USERNAME }}/erp:${{ steps.version.outputs.version }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max